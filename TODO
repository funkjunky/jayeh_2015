TODO www.jayeh.ca
—

	*- Consider some better security for generic rest server
		*- implement feathers authentication
		*- add admin user
		*- ensure login works
		*- ensure adding new user works
	*- add hooks to ensure authorization of user
		*- write down implementation here
		*- system now takes config.js file in
		*- make sure default works.
		*- make sure config works.

	- separate the code into nice sections and files for generic rest server. May as well make it super clean.
		*- finish separating code into sections
		*- rename files to be dashed if camel cased
		*- no static strings… all should be configs!
		*- ensure server still works as expected, try login and gets
		*- commit
		*- merge back to dev
		*-figure out if there is a way to bypass “/api/“ thing, if no immediate solution becomes apparent, then simply assume always prefixed with api, including make a prefix config and the default is “/api”
		*- remove the connection event… it’s messy and adds unneeded code. [just remove the function param].
		*- fix cannot get messages… do better proper error, like 404
		*- commit

	*- figure out how to get global install to work, so people can use generic rest server in a basic global way.
	*- update readme to reflect authentication and authorization
	*- commit, merge to master, update package.json with new version, commit, tag new version. push, then push dev branch and delete feature branch
	*- deploy the generic server

	*- ensure the proxy is setup for jayeh_2015 [url with port]
		*- through environment variable on local
		*- how to setup environment variable on heroku

	- add authentication to jayeh_2015
		- add a login page
		- ensure i can login as super user
		- add oauth buttons
			- start with google
			- troubleshoot…
			- add the rest
		- ensure that oauth user returns info, but can’t create or edit articles

	- get jayeh_2015 up live on heroku
		- get a new instance going for generic rest server
			- get setup and run
			- test
		- setup a new instance going for jayeh_2015
			- set the config variables
				- PROXYURL to point to generic rest server (heroku config:set x=noquotes)
				- ADMINUSER [different from dev]
				- ADMINPASS
			- run the server and test

	- migrate data
		- get data from old mongoDB
		- write a script to import it to the new blog
		- put up new website
		- import old blog posts
		- update old blog posts with nice headers

	- add system to edit old articles
		- simple list with edit and delete links and a create link at the top
	- edit old links to have beautiful header markup
		- ??? effects??? I’m thinking greyscale background, text has white gradient out to transparent background, which disappears on hover and the text becomes thing white glow, black text

	- add comment system
		- ensure oauth users can comment.
		- try and get avatar from oauth
		- ensure the comments look nice

	- write new blog post about building my new blog
		~at same time work on cute character parallax

	- character parallax [dude in a library!]
		- calculate dimensions of sprites to fit in header neatly. (imagine it)
		- make a pixel character of myself
		- get or make a nice set of book shelves i can use
		- place graphics on page
		- add scrolling effect that moves the character
		- create animations for character walking left and right
		- create different idling animations
			- left to right hand scanning books
			- tip toes, head left right
			- head tilt, maybe chin scratch
			- squat
		- implement the walking animations and idle animations
		- create an animation for grabbing a book and opening it
		- create an animation for scanning an open book
		- create an animation for flipping pages right to left
			- reverse it for the opposite?
		- create a sprite for an empty book spot, so I can grab a book and leave an empty spot.
		- implement the grabbing, scanning and flipping animations for articles
		~put additional ideas from book in this TODO later on.

	- add autosaving to local storage

	- create Sidenote component like Ars’s Game Details on the right or left. You specify the left or right and the width [defaults: right, 200]. The inside is the html

	- add very nice default font sizes and formatting for article… now that I have preview I should be able to ensure everything looks incredible
		- pre-wrap so new lines show
		- find a nice type font
		- ensure font size is appropriate
		- ensure images and their captions look beautiful
	- ensure the main article page looks incredibly nice with header.
	- add a preview link above the header textarea to preview the whole article, so you can see the header effect in a testing environment.
		- the url grabs the data from local storage to render

	- create a Definition component that when hovered provides a definition for a term on the spot. Word attribute is displayed, while the inside is the html for the definition.

 - Add responsive design setup, ensure it works on my ipad and iphone [doesn’t need to look that good, just be readable without scrolling left right or having to zoom]

 - Prettify front page
	- articles show header without parallax effect and with zoom out perhaps
		- summary items pass a prop “isFullPage” that the header html can use to pass to it’s components.
	- On mouseover the first bit of text is shown to give the user a preview with all tags stripped away.
	- format everything very nicely and add a splash of colour where it seems necessary.
	- add share button on top of main page article
		- when clicked, have animation of character text on a cell phone

 - Add my soundcloud likes to my website
	- create animations for character to listen to music when played
	- implement animation